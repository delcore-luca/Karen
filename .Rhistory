"G->0",
"M->0"
,"HSC->1"
,"P1->1"
,"P2->1"
)
cnstr <- c("theta\\[\\'HSC->P1\\'\\]=(theta\\[\\'P1->T\\'\\] + theta\\[\\'P1->B\\'\\] + theta\\[\\'P1->NK\\'\\])",
"theta\\[\\'HSC->P2\\'\\]=(theta\\[\\'P2->G\\'\\] + theta\\[\\'P2->M\\'\\])")
latsts <- c("HSC", "P1", "P2")
ctps <- unique(setdiff(c(sapply(rcts, function(r){
as.vector(unlist(strsplit(r, split = "->", fixed = T)))
}, simplify = "array")), c("0", "1")))
########## TRUE PARAMETERS ##########
th.true <- c(0.65, 0.9, 0.925, 0.975, 0.55, 3.5, 3.1, 4, 3.7, 4.1, 0.25, 0.225, 0.275)
names(th.true) <- tail(rcts, -length(cnstr))
s2.true <- 1e-8
r0.true <- .1
r1.true <- .5
# r0.true <- r1.true <- as.numeric(commandArgs(trailingOnly = TRUE))
phi.true <- c(th.true, r0.true, r1.true)
names(phi.true) <- c(names(th.true), "r0", "r1")
S <- 1000
nCL <- 3
X0 <- rep(0, length(ctps))
names(X0) <- ctps
X0["HSC"] <- 100
nSim <- 100
ntps <- 5
resAllSim <- vector("list", length = nSim)
sim <- 1
cat(paste("simulation n. ", sim, "\t\tr0 = ", r0.true, "\tr1 = ", r1.true, "\n", sep = ""))
########## SIMULATE TRAJECTORIES ##########
XY <- get.sim.trajectories(rct.lst = rcts,
constr.lst = cnstr,
latSts.lst = latsts,
ct.lst = ctps,
th = th.true,
S = S,
nCL = nCL,
X0 = X0,
s2 = s2.true,
r0 = r0.true,
r1 = r1.true,
f = 0,
ntps = ntps,
trunc = FALSE)
nProc <- 1 # detectCores()
cat(paste("\tLoading CPU cluster...\n", sep = ""))
cat(paste("Cluster type: ", "PSOCK\n", sep = ""))
cpu <- Sys.getenv("SLURM_CPUS_ON_NODE", nProc)
hosts <- rep("localhost",cpu)
cl <- makeCluster(hosts, type = "PSOCK")
# cl <- makeForkCluster(nnodes = nProc)
rm(nProc)
m_0 <- replicate(nCL, X0, simplify = "array")
colnames(m_0) <- 1:nCL
P_0 <- Diagonal(length(ctps) * nCL, 1e-5)
rownames(P_0) <- colnames(P_0) <- rep(1:nCL, each = length(ctps))
res.fit <- get.fit(rct.lst = rcts,
constr.lst = cnstr,
latSts.lst = latsts,
ct.lst = ctps,
Y = XY$Y[,setdiff(ctps, latsts),],
m0 = m_0, # replicate(nCL, X0, simplify = "array"),
P0 = P_0, # Diagonal(length(ctps) * nCL, 1e-5),
cl = cl,
list(nLQR = 3,
lmm = 25,
pgtol = 0,
relErrfct = 1e-5, # 1e-9
tol = 1e-9, # 1e-4
maxit = 1000,
maxitEM = 3,
trace = 1,
FORCEP = FALSE))
stopCluster(cl)
phi.curr <- res.fit$fit$par
par(mar = c(5,5,2,2))
plot(th.true, head(phi.curr,-2),
xlim = range(th.true, head(phi.curr,-2)),
ylim = range(th.true, head(phi.curr,-2)),
xlab = expression(theta[true]),
ylab = expression(theta[EKF]),
cex.axis = 2, cex.lab = 2, pch = 21, cex = 5)
lines(range(th.true, head(phi.curr,-2)),
range(th.true, head(phi.curr,-2)), lwd = 3, lty = 2, col = "red")
text(x = th.true,
y = head(phi.curr,-2),
labels = names(th.true), font = 2, cex = 2)
text(x = diff(range(th.true, head(phi.curr,-2)))/10*2, y = max(th.true, head(phi.curr,-2))/10*9, labels = bquote(~ rho[0] == .(round(r0.true,2))), cex = 2)
text(x = diff(range(th.true, head(phi.curr,-2)))/10*2, y = max(th.true, head(phi.curr,-2))/10*8, labels = bquote(~ widehat(rho)[0] == .(round(phi.curr["r0"],2))), cex = 2)
text(x = diff(range(th.true, head(phi.curr,-2)))/10*5, y = max(th.true, head(phi.curr,-2))/10*9, labels = bquote(~ rho[1] == .(round(r1.true,2))), cex = 2)
text(x = diff(range(th.true, head(phi.curr,-2)))/10*5, y = max(th.true, head(phi.curr,-2))/10*8, labels = bquote(~ widehat(rho)[1] == .(round(phi.curr["r1"],2))), cex = 2)
par(mar = c(5,5,2,2), mfrow = c(ceiling(nCL/ceiling(sqrt(nCL))),ceiling(sqrt(nCL))))
get.sMoments(res.fit = res.fit, X = XY$X)
#'
#' #########################
#' ## Visualizing results ##
#' #########################
#'
#' ## simulated data and clone-average smoothing moments
#' par(mar = c(2,5,2,2), mfrow = c(1,3))
#' get.sMoments.avg(res.fit = res.fit, X = XY$X)
#' }
##' @export
get.sMoments.avg <- function(res.fit, X = NULL, cell.cols = NULL){
V <- res.fit$V # net-effect matrix
nProc <- length(res.fit$cloneChunks) # nrow(summary(cl)) # number of cores
Y <- res.fit$Y # simulated measurements
Y_NA <- Y
Y_NA[Y_NA == 0] <- NA
nCL <- dim(Y)[3] # number of clones
if(!is.null(cell.cols)){
cols <- cell.cols[rownames(V)]
}else{
cols <- palette.colors(nrow(V), palette = "Classic Tableau")
}
if(!is.null(X)){
tps <- as.numeric(rownames(X))
rownames(X) <- (tps - min(tps))/(max(tps) - min(tps))
X_avg <- apply(X, c(1,2), mean, na.rm = T)
X_avg[is.nan(X_avg)] <- NA
}
Y_avg <- apply(Y_NA, c(1,2), mean, na.rm = T)
Y_avg[is.nan(Y_avg)] <- NA
mean_smooth_avg <- abind::abind(sapply(1:nProc, function(cnk){
sapply(1:length(res.fit$cloneChunks[[cnk]]), function(cl){
m_xt <- array(data = NA, dim = dim(Y[,,1]) + c(1,0))
rownames(m_xt) <- c("0", rownames(Y))
m_xt[rownames(t(res.fit$bwd.res$m_xt_Yn[[cnk]][,cl,])),] <- t(res.fit$bwd.res$m_xt_Yn[[cnk]][,cl,])
return(m_xt)
}, simplify = "array")
}, simplify = FALSE))
mean_smooth_avg <- apply(mean_smooth_avg, c(1,2), mean, na.rm = T)
sd_smooth_avg <- abind::abind(sapply(1:nProc, function(cnk){
idx.clones <- matrix(data = 1:(length(res.fit$cloneChunks[[cnk]])*nrow(res.fit$V)), nrow = nrow(res.fit$V), ncol = length(res.fit$cloneChunks[[cnk]]))
sapply(1:length(res.fit$cloneChunks[[cnk]]), function(cl){
sd_xt <- array(data = NA, dim = dim(Y[,,1]) + c(1,0))
rownames(sd_xt) <- c("0", rownames(Y))
sd_xt[dimnames(res.fit$bwd.res$V_xt_Yn[[cnk]][res.fit$idx.clones[,cl],res.fit$idx.clones[,cl],])[[3]],] <- sqrt(t(sapply(1:(dim(res.fit$bwd.res$V_xt_Yn[[cnk]][idx.clones[,cl],idx.clones[,cl],])[3]),
FUN = function(t){
diag(nearestPD(res.fit$bwd.res$V_xt_Yn[[cnk]][idx.clones[,cl],idx.clones[,cl],t]))})))
return(sd_xt)
}, simplify = "array")
}, simplify = FALSE))
sd_smooth_avg <- apply(sd_smooth_avg, c(1,2), mean, na.rm = TRUE)
matplot(as.numeric(rownames(Y_NA)), Y_avg, lty = 1, pch = 20, add = F, col = alpha(cols, alpha = .8), cex = 7,
cex.axis = 2, cex.lab = 2, xlab = "t", ylab = expression("Y"[t]), main = paste("clone average ", sep = ""), cex.main = 2,
xlim = c(0, max(as.numeric(rownames(Y)))), ylim = range(c(Y_avg, mean_smooth_avg, mean_smooth_avg - 1.96*sd_smooth_avg, mean_smooth_avg + 1.96*sd_smooth_avg), na.rm = T))
if(!is.null(X)){
matplot(as.numeric(rownames(X_avg)), X_avg, add = T, pch = 1, cex = 6, lwd = 2, col = alpha(cols, alpha = .8))
}
matplot(as.numeric(rownames(mean_smooth_avg)), mean_smooth_avg, lwd = 3, lty = 1, type = 'l', add = TRUE, col = cols)
matplot(as.numeric(rownames(mean_smooth_avg)), mean_smooth_avg - 1.96*sd_smooth_avg, lwd = 3, lty = 3, type = 'l', add = TRUE, col = cols)
matplot(as.numeric(rownames(mean_smooth_avg)), mean_smooth_avg + 1.96*sd_smooth_avg, lwd = 3, lty = 3, type = 'l', add = TRUE, col = cols)
}
#'
#' #########################
#' ## Visualizing results ##
#' #########################
#'
#' ## simulated data and smoothing moments
#' par(mar = c(2,5,2,2), mfrow = c(1,3))
#' get.sMoments(res.fit = res.fit, X = XY$X)
#' }
##' @export
get.sMoments <- function(res.fit, X = NULL, cell.cols = NULL){
V <- res.fit$V # net-effect matrix
nProc <- length(res.fit$cloneChunks) # nrow(summary(cl)) # number of cores
Y <- res.fit$Y # simulated measurements
Y_NA <- Y
Y_NA[Y_NA == 0] <- NA
if(!is.null(cell.cols)){
cols <- cell.cols[rownames(V)]
}else{
cols <- palette.colors(nrow(V), palette = "Classic Tableau")
}
if(!is.null(X)){
tps <- as.numeric(rownames(X))
rownames(X) <- (tps - min(tps))/(max(tps) - min(tps))
}
lapply(1:nProc, function(cnk){
lapply(1:length(res.fit$cloneChunks[[cnk]]), function(cl){
idx.clones <- matrix(data = 1:(length(res.fit$cloneChunks[[cnk]])*nrow(V)), nrow = nrow(V), ncol = length(res.fit$cloneChunks[[cnk]]))
mean_smooth <- t(res.fit$bwd.res$m_xt_Yn[[cnk]][,cl,])
sd_smooth <- sqrt(t(sapply(1:(dim(res.fit$bwd.res$V_xt_Yn[[cnk]][idx.clones[,cl],idx.clones[,cl],])[3]), FUN = function(t){diag(nearestPD(res.fit$bwd.res$V_xt_Yn[[cnk]][idx.clones[,cl],idx.clones[,cl],t]))})))
rownames(sd_smooth) <- rownames(mean_smooth)
matplot(as.numeric(rownames(Y_NA)), Y_NA[,,res.fit$cloneChunks[[cnk]][cl]], lty = 1, pch = 20, type = 'p', add = F, col = alpha(palette.colors(nrow(V), palette = "Classic Tableau"), alpha = .8), cex = 2,
cex.axis = 2, cex.lab = 2, xlab = "t", ylab = expression("Y"[t]), main = paste("clone ", cl, sep = ""), cex.main = 2,
xlim = c(0, max(as.numeric(rownames(Y)))), ylim = range(c(Y_NA[,,res.fit$cloneChunks[[cnk]][cl]], mean_smooth, mean_smooth - 1.96*sd_smooth, mean_smooth + 1.96*sd_smooth), na.rm = T))
if(!is.null(X)){
matplot(as.numeric(rownames(X)), X[,,res.fit$cloneChunks[[cnk]][cl]], add = T, pch = 1, cex = 1.5, lwd = 2, col = alpha(palette.colors(nrow(V), palette = "Classic Tableau"), alpha = .8))
}
matplot(as.numeric(rownames(mean_smooth)), mean_smooth, lwd = 2, lty = 1, type = 'l', add = TRUE, col = palette.colors(nrow(V), palette = "Classic Tableau"))
matplot(as.numeric(rownames(mean_smooth)), mean_smooth - 1.96*sd_smooth, lwd = 2, lty = 3, type = 'l', add = TRUE, col = palette.colors(nrow(V), palette = "Classic Tableau"))
matplot(as.numeric(rownames(mean_smooth)), mean_smooth + 1.96*sd_smooth, lwd = 2, lty = 3, type = 'l', add = TRUE, col = palette.colors(nrow(V), palette = "Classic Tableau"))
# legend(x = "topright", legend = rownames(V), col = palette.colors(nrow(V), palette = "Classic Tableau"), pch = 20, lwd = 5, cex = 1.5)
})
})
plot.new()
legend(x = "center", legend = rownames(V), col = palette.colors(nrow(V), palette = "Classic Tableau"), pch = 20, lwd = 5, cex = 1.5)
}
par(mar = c(5,5,2,2), mfrow = c(ceiling(nCL/ceiling(sqrt(nCL))),ceiling(sqrt(nCL))))
get.sMoments(res.fit = res.fit, X = XY$X)
dev.off()
par(mar = c(5,5,2,2), mfrow = c(1,1))
get.sMoments.avg(res.fit = res.fit, X = XY$X)
res <- list()
res$phi.opt <- res.fit$fit$par
res$bwd.res <- res.fit$bwd.res
res$Y <- XY$Y
res$X <- XY$X
resAllSim[[sim]] <- res
stopCluster(cl)
cat("\nInstall/load packages")
inst.pkgs <- installed.packages()
## required packages:
l.pkgs <- c("expm",
"Matrix",
"parallel",
"gaussquad",
"splines",
"scales",
"mvtnorm",
"tmvtnorm",
"MASS",
"igraph",
"stringr",
"Karen")
## check if packages are installed
lapply(l.pkgs, function(pkg){
if(!(pkg %in% rownames(inst.pkgs))){
install.packages(pkg)
}
})
lapply(l.pkgs, function(pkg){library(pkg,character.only=TRUE)})
rm(list = ls())
rcts <- c("HSC->P1",
"HSC->P2",
"P1->T",
"P1->B",
"P1->NK",
"P2->G",
"P2->M",
"T->0",
"B->0",
"NK->0",
"G->0",
"M->0"
,"HSC->1"
,"P1->1"
,"P2->1"
)
cnstr <- c("theta\\[\\'HSC->P1\\'\\]=(theta\\[\\'P1->T\\'\\] + theta\\[\\'P1->B\\'\\] + theta\\[\\'P1->NK\\'\\])",
"theta\\[\\'HSC->P2\\'\\]=(theta\\[\\'P2->G\\'\\] + theta\\[\\'P2->M\\'\\])")
latsts <- c("HSC", "P1", "P2")
ctps <- unique(setdiff(c(sapply(rcts, function(r){
as.vector(unlist(strsplit(r, split = "->", fixed = T)))
}, simplify = "array")), c("0", "1")))
########## TRUE PARAMETERS ##########
th.true <- c(0.65, 0.9, 0.925, 0.975, 0.55, 3.5, 3.1, 4, 3.7, 4.1, 0.25, 0.225, 0.275)
names(th.true) <- tail(rcts, -length(cnstr))
s2.true <- 1e-8
r0.true <- .1
r1.true <- .5
phi.true <- c(th.true, r0.true, r1.true)
names(phi.true) <- c(names(th.true), "r0", "r1")
S <- 1000
nCL <- 3
X0 <- rep(0, length(ctps))
names(X0) <- ctps
X0["HSC"] <- 100
nSim <- 100
# ntps <- as.numeric(commandArgs(trailingOnly = TRUE))
ntps <- 5
resAllSim <- vector("list", length = nSim)
sim <- 1
cat(paste("simulation n. ", sim, "\t\tT = ", ntps, "\n", sep = ""))
ntps
########## SIMULATE TRAJECTORIES ##########
XY <- get.sim.trajectories(rct.lst = rcts,
constr.lst = cnstr,
latSts.lst = latsts,
ct.lst = ctps,
th = th.true,
S = S,
nCL = nCL,
X0 = X0,
s2 = s2.true,
r0 = r0.true,
r1 = r1.true,
f = 0,
ntps = ntps,
trunc = FALSE)
nProc <- 1 # detectCores()
cat(paste("\tLoading CPU cluster...\n", sep = ""))
cat(paste("Cluster type: ", "PSOCK\n", sep = ""))
cpu <- Sys.getenv("SLURM_CPUS_ON_NODE", nProc)
hosts <- rep("localhost",cpu)
cl <- makeCluster(hosts, type = "PSOCK")
# cl <- makeForkCluster(nnodes = nProc)
rm(nProc)
m_0 <- replicate(nCL, X0, simplify = "array")
colnames(m_0) <- 1:nCL
P_0 <- Diagonal(length(ctps) * nCL, 1e-5)
rownames(P_0) <- colnames(P_0) <- rep(1:nCL, each = length(ctps))
res.fit <- get.fit(rct.lst = rcts,
constr.lst = cnstr,
latSts.lst = latsts,
ct.lst = ctps,
Y = XY$Y[,setdiff(ctps, latsts),],
m0 = m_0, # replicate(nCL, X0, simplify = "array"),
P0 = P_0, # Diagonal(length(ctps) * nCL, 1e-5),
cl = cl,
list(nLQR = 3,
lmm = 25,
pgtol = 0,
relErrfct = 1e-5, # 1e-9
tol = 1e-9, # 1e-4
maxit = 1000,
maxitEM = 3,
trace = 1,
FORCEP = FALSE))
stopCluster(cl)
phi.curr <- res.fit$fit$par
par(mar = c(5,5,2,2))
plot(th.true, head(phi.curr,-2),
xlim = range(th.true, head(phi.curr,-2)),
ylim = range(th.true, head(phi.curr,-2)),
xlab = expression(theta[true]),
ylab = expression(theta[EKF]),
cex.axis = 2, cex.lab = 2, pch = 21, cex = 5)
lines(range(th.true, head(phi.curr,-2)),
range(th.true, head(phi.curr,-2)), lwd = 3, lty = 2, col = "red")
text(x = th.true,
y = head(phi.curr,-2),
labels = names(th.true), font = 2, cex = 2)
text(x = diff(range(th.true, head(phi.curr,-2)))/10*2, y = max(th.true, head(phi.curr,-2))/10*9, labels = bquote(~ rho[0] == .(round(r0.true,2))), cex = 2)
text(x = diff(range(th.true, head(phi.curr,-2)))/10*2, y = max(th.true, head(phi.curr,-2))/10*8, labels = bquote(~ widehat(rho)[0] == .(round(phi.curr["r0"],2))), cex = 2)
text(x = diff(range(th.true, head(phi.curr,-2)))/10*5, y = max(th.true, head(phi.curr,-2))/10*9, labels = bquote(~ rho[1] == .(round(r1.true,2))), cex = 2)
text(x = diff(range(th.true, head(phi.curr,-2)))/10*5, y = max(th.true, head(phi.curr,-2))/10*8, labels = bquote(~ widehat(rho)[1] == .(round(phi.curr["r1"],2))), cex = 2)
#'
#' #########################
#' ## Visualizing results ##
#' #########################
#'
#' ## simulated data and clone-average smoothing moments
#' par(mar = c(2,5,2,2), mfrow = c(1,3))
#' get.sMoments.avg(res.fit = res.fit, X = XY$X)
#' }
##' @export
get.sMoments.avg <- function(res.fit, X = NULL, cell.cols = NULL){
V <- res.fit$V # net-effect matrix
nProc <- length(res.fit$cloneChunks) # nrow(summary(cl)) # number of cores
Y <- res.fit$Y # simulated measurements
Y_NA <- Y
Y_NA[Y_NA == 0] <- NA
nCL <- dim(Y)[3] # number of clones
if(!is.null(cell.cols)){
cols <- cell.cols[rownames(V)]
}else{
cols <- palette.colors(nrow(V), palette = "Classic Tableau")
}
if(!is.null(X)){
tps <- as.numeric(rownames(X))
rownames(X) <- (tps - min(tps))/(max(tps) - min(tps))
X_avg <- apply(X, c(1,2), mean, na.rm = T)
X_avg[is.nan(X_avg)] <- NA
}
Y_avg <- apply(Y_NA, c(1,2), mean, na.rm = T)
Y_avg[is.nan(Y_avg)] <- NA
mean_smooth_avg <- abind::abind(sapply(1:nProc, function(cnk){
sapply(1:length(res.fit$cloneChunks[[cnk]]), function(cl){
m_xt <- array(data = NA, dim = dim(Y[,,1]) + c(1,0))
rownames(m_xt) <- c("0", rownames(Y))
m_xt[rownames(t(res.fit$bwd.res$m_xt_Yn[[cnk]][,cl,])),] <- t(res.fit$bwd.res$m_xt_Yn[[cnk]][,cl,])
return(m_xt)
}, simplify = "array")
}, simplify = FALSE))
mean_smooth_avg <- apply(mean_smooth_avg, c(1,2), mean, na.rm = T)
sd_smooth_avg <- abind::abind(sapply(1:nProc, function(cnk){
idx.clones <- matrix(data = 1:(length(res.fit$cloneChunks[[cnk]])*nrow(res.fit$V)), nrow = nrow(res.fit$V), ncol = length(res.fit$cloneChunks[[cnk]]))
sapply(1:length(res.fit$cloneChunks[[cnk]]), function(cl){
sd_xt <- array(data = NA, dim = dim(Y[,,1]) + c(1,0))
rownames(sd_xt) <- c("0", rownames(Y))
sd_xt[dimnames(res.fit$bwd.res$V_xt_Yn[[cnk]][res.fit$idx.clones[,cl],res.fit$idx.clones[,cl],])[[3]],] <- sqrt(t(sapply(1:(dim(res.fit$bwd.res$V_xt_Yn[[cnk]][idx.clones[,cl],idx.clones[,cl],])[3]),
FUN = function(t){
diag(nearestPD(res.fit$bwd.res$V_xt_Yn[[cnk]][idx.clones[,cl],idx.clones[,cl],t]))})))
return(sd_xt)
}, simplify = "array")
}, simplify = FALSE))
sd_smooth_avg <- apply(sd_smooth_avg, c(1,2), mean, na.rm = TRUE)
matplot(as.numeric(rownames(Y_NA)), Y_avg, lty = 1, pch = 20, add = F, col = alpha(cols, alpha = .8), cex = 7,
cex.axis = 2, cex.lab = 2, xlab = "t", ylab = expression("Y"[t]), main = paste("clone average ", sep = ""), cex.main = 2,
xlim = c(0, max(as.numeric(rownames(Y)))), ylim = range(c(Y_avg, mean_smooth_avg, mean_smooth_avg - 1.96*sd_smooth_avg, mean_smooth_avg + 1.96*sd_smooth_avg), na.rm = T))
if(!is.null(X)){
matplot(as.numeric(rownames(X_avg)), X_avg, add = T, pch = 1, cex = 6, lwd = 2, col = alpha(cols, alpha = .8))
}
matplot(as.numeric(rownames(mean_smooth_avg)), mean_smooth_avg, lwd = 3, lty = 1, type = 'l', add = TRUE, col = cols)
matplot(as.numeric(rownames(mean_smooth_avg)), mean_smooth_avg - 1.96*sd_smooth_avg, lwd = 3, lty = 3, type = 'l', add = TRUE, col = cols)
matplot(as.numeric(rownames(mean_smooth_avg)), mean_smooth_avg + 1.96*sd_smooth_avg, lwd = 3, lty = 3, type = 'l', add = TRUE, col = cols)
}
#'
#' #########################
#' ## Visualizing results ##
#' #########################
#'
#' ## simulated data and smoothing moments
#' par(mar = c(2,5,2,2), mfrow = c(1,3))
#' get.sMoments(res.fit = res.fit, X = XY$X)
#' }
##' @export
get.sMoments <- function(res.fit, X = NULL, cell.cols = NULL){
V <- res.fit$V # net-effect matrix
nProc <- length(res.fit$cloneChunks) # nrow(summary(cl)) # number of cores
Y <- res.fit$Y # simulated measurements
Y_NA <- Y
Y_NA[Y_NA == 0] <- NA
if(!is.null(cell.cols)){
cols <- cell.cols[rownames(V)]
}else{
cols <- palette.colors(nrow(V), palette = "Classic Tableau")
}
if(!is.null(X)){
tps <- as.numeric(rownames(X))
rownames(X) <- (tps - min(tps))/(max(tps) - min(tps))
}
lapply(1:nProc, function(cnk){
lapply(1:length(res.fit$cloneChunks[[cnk]]), function(cl){
idx.clones <- matrix(data = 1:(length(res.fit$cloneChunks[[cnk]])*nrow(V)), nrow = nrow(V), ncol = length(res.fit$cloneChunks[[cnk]]))
mean_smooth <- t(res.fit$bwd.res$m_xt_Yn[[cnk]][,cl,])
sd_smooth <- sqrt(t(sapply(1:(dim(res.fit$bwd.res$V_xt_Yn[[cnk]][idx.clones[,cl],idx.clones[,cl],])[3]), FUN = function(t){diag(nearestPD(res.fit$bwd.res$V_xt_Yn[[cnk]][idx.clones[,cl],idx.clones[,cl],t]))})))
rownames(sd_smooth) <- rownames(mean_smooth)
matplot(as.numeric(rownames(Y_NA)), Y_NA[,,res.fit$cloneChunks[[cnk]][cl]], lty = 1, pch = 20, type = 'p', add = F, col = alpha(palette.colors(nrow(V), palette = "Classic Tableau"), alpha = .8), cex = 2,
cex.axis = 2, cex.lab = 2, xlab = "t", ylab = expression("Y"[t]), main = paste("clone ", cl, sep = ""), cex.main = 2,
xlim = c(0, max(as.numeric(rownames(Y)))), ylim = range(c(Y_NA[,,res.fit$cloneChunks[[cnk]][cl]], mean_smooth, mean_smooth - 1.96*sd_smooth, mean_smooth + 1.96*sd_smooth), na.rm = T))
if(!is.null(X)){
matplot(as.numeric(rownames(X)), X[,,res.fit$cloneChunks[[cnk]][cl]], add = T, pch = 1, cex = 1.5, lwd = 2, col = alpha(palette.colors(nrow(V), palette = "Classic Tableau"), alpha = .8))
}
matplot(as.numeric(rownames(mean_smooth)), mean_smooth, lwd = 2, lty = 1, type = 'l', add = TRUE, col = palette.colors(nrow(V), palette = "Classic Tableau"))
matplot(as.numeric(rownames(mean_smooth)), mean_smooth - 1.96*sd_smooth, lwd = 2, lty = 3, type = 'l', add = TRUE, col = palette.colors(nrow(V), palette = "Classic Tableau"))
matplot(as.numeric(rownames(mean_smooth)), mean_smooth + 1.96*sd_smooth, lwd = 2, lty = 3, type = 'l', add = TRUE, col = palette.colors(nrow(V), palette = "Classic Tableau"))
# legend(x = "topright", legend = rownames(V), col = palette.colors(nrow(V), palette = "Classic Tableau"), pch = 20, lwd = 5, cex = 1.5)
})
})
plot.new()
legend(x = "center", legend = rownames(V), col = palette.colors(nrow(V), palette = "Classic Tableau"), pch = 20, lwd = 5, cex = 1.5)
}
par(mar = c(5,5,2,2), mfrow = c(ceiling(nCL/ceiling(sqrt(nCL))),ceiling(sqrt(nCL))))
get.sMoments(res.fit = res.fit, X = XY$X)
par(mar = c(5,5,2,2), mfrow = c(1,1))
get.sMoments.avg(res.fit = res.fit, X = XY$X)
res <- list()
res$phi.opt <- res.fit$fit$par
res$bwd.res <- res.fit$bwd.res
res$Y <- XY$Y
res$X <- XY$X
resAllSim[[sim]] <- res
stopCluster(cl)
res
stopCluster(cl)
args(get.cdn)
args(get.sMoments.avg)
args(get.sMoments)
args(get.cdn)
args(get.fit)
load("~/MyDrive/work/Rcode/packages/Karen/RM-example.RData")
names(res.fit)
args(get.sim.trajectories)
getwd()
# install.packages("devtools")
library("devtools")
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
document()
setwd("..")
install("Karen")
detach("package:Karen", unload=TRUE)
pack <- "Karen"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
getwd()
setwd("./Karen")
document()
setwd("..")
install("Karen")
detach("package:Karen", unload=TRUE)
pack <- "Karen"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
getwd()
setwd("./Karen")
document()
setwd("..")
install("Karen")
detach("package:Karen", unload=TRUE)
pack <- "Karen"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
setwd("./Karen")
document()
document()
setwd("..")
install("Karen")
detach("package:Karen", unload=TRUE)
pack <- "Karen"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
